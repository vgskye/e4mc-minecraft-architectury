plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    shadowCommon(implementation("io.netty.incubator:netty-incubator-codec-classes-quic:${rootProject.quic_version}") {
        exclude(group: "io.netty")
    })
    include 'folk.sisby:kaleido-config:0.3.1+1.3.1'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url "https://sg.storage.bunnycdn.com/skyeven"
            credentials(HttpHeaderCredentials) {
                name = "AccessKey"
                value = property("skyevenToken")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    type = STABLE
    changelog = getLatestChangelog()
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    version = project.version + "-fabric"
    displayName = "[Fabric] $project.version"

    // Uncomment your desired platform(s)
    curseforge {
        accessToken = project.curseforgeApiToken
        projectId = project.curseforgeId
        minecraftVersions.addAll(
                "1.18", "1.18.1", "1.18.2",
                "1.19", "1.19.1", "1.19.2", "1.19.3", "1.19.4",
                "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.20.5", "1.20.6",
                "1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"
        )

        requires{
            slug = "fabric-api"
        }
    }

    modrinth {
        accessToken = project.modrinthApiToken
        projectId = project.modrinthId
        additionalFiles.from(sourcesJar.archiveFile)
        minecraftVersions.addAll(
                "1.18", "1.18.1", "1.18.2",
                "1.19", "1.19.1", "1.19.2", "1.19.3", "1.19.4",
                "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.20.5", "1.20.6",
                "1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"
        )

        requires{
            slug = "fabric-api"
        }
    }
}